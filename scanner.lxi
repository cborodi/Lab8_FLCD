%{
#include <stdio.h>
#include <math.h>
%} 

DIGIT 		[0-9] 
NUMBER		[1-9][0-9]*|0
STRING		["]([a-zA-Z])*["]
KEYWORD		"begin" | "end" | "def_char" | "def_short" | "def_int" | "def_long" | "def_float" | "def_double" | "def_void" | "break" | "const" | "continue" | "do" | "else" | "if" | "loop" | "aslongas" | "in" | "out" | "sqrt"
SEPARATOR	"[" | "]" | "{" | "}" | ";" | ":" | "space" | "\n" | "\t" | "," | "â€œ"
OPERATOR	"=" | "+" | "-" | "*" | "/" | "%" | "==" | "!=" | ">" | "<" | ">=" | "<=" | "++" | "--" | "~" | "&" | "|" | "^" | "<<" | ">>" | "!" | "&&" | "||"
ID 		[a-z][a-z0-9]* 

%% 

{NUMBER}	{ printf("NUMBER %s (%d)\n", yytext, atoi(yytext)); }
{KEYWORD}	{ printf("KEYWORD %s\n", yytext); }
{DIGIT}		{ printf("DIGIT %s (%d)\n", yytext, atoi(yytext)); }
{STRING}	{ printf("STRING %s\n", yytext); }
{ID}		{ printf("ID %s\n", yytext); }
{OPERATOR}	{ printf("OPERATOR %s\n", yytext); }
{SEPARATOR}	{ printf("SEPARATOR %s\n", yytext); }

%% 

main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    yyin = fopen( argv[0], "r" ); 
    else 
     yyin = stdin; 
    yylex(); 
} 
